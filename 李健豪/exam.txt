从 0 开始实现一个「学院派」微前端方案	03 Aug 2020	标签：微前端架构	前言 2016 年 11 月，ThoughtWorks 在技术雷达（Technology Radar）中首次提出了微前端（Micro Frontends）的概念，将后端微服务化的思想引入前端。此后，在前端社区中，出现了很多优秀的开源解决方案，例如 SingleSPA、Qiankun、IceStark 等。 微前端的实施方式有很多种，具体可以参考 Phodal 的文章。关于这些实现方式和微前端诞生的意义、解决的业务痛点，在这里就不再赘述了。 本文将以一个在校大学生的视角，基于我在学校社团里为数不多的中后台开发实战经验，从 0 开始实现一个「学院派」微前端方案，抛砖引玉地提供我对于微前端技术落地的思考和思路。 设计思路和实现 从目前开源社区的现状来看，SingleSPA 是一个发展历史比较悠久的微前端解决方案，拥有完善的社区支持和维护力量。 SingleSPA 架构中有主应用和子应用两种角色，主应用作为应用的框架运行时环境，动态地配置子应用，通过监听全局路由事件完成子应用的加载、卸载以及其他生命周期的管理。在子应用被挂载完成后，路由便由被挂载的子应用接管。…	
构建规范的前端工作流与生态体系	20 Mar 2020	标签：技术思考前端团队协作	一个前端项目，可以只由一个人来完成。那么这时，这一个人就是整个前端团队的规范，而规范的制定则显得无关紧要。但现实往往并非如此。一个成熟的线上项目中往往需要一个前端团队完成技术选型、需求分析、开发、测试、集成、部署等流程。而一个好的前端团队，其强大不仅体现在对技术的使用上，同时也体现在是否有一套完备的工作流（Work Flow）用于规范在团队协作中的个人行为和团队宏观行为，以及一套基础设施用于支撑工作流和业务属性。 这篇文章是在笔者观察到工作室中存在的一些问题后针对这些问题提出的解决方案、参与构建的基础设施项目以及对工作室未来基础设施添加的构想的一次记录。 存在的问题 笔者在三年前加入了工作室，工作室的前端技术栈在当时其实是很先进的。然而，当笔者真正接手项目时，却发现工作室在团队协作和工作规范方面的问题其实比较大。单从前端方面来说，存在问题包括但不限于： 量身定制的脚手架 在工作室的前端项目中，我们通常都是使用特定的脚手架生成项目目录结构。例如，Vue 项目使用 Vue CLI，React 项目使用 Create React App，而有的项目则是由前端自主配置 Webpack 等构建工具。 这样做虽然都能达到工程化开发并上线的结果，但与此同时它带来的问题也是显而易见的：即使目前各大框架官方的脚手架已经十分先进了，但是它们并不能保证符合每个项目的业务属性。也就是说，…	
2019 年度总结	15 Mar 2020	标签：年度总结	现在，2020 年也快过去四分之一了。按照惯例，每年的一月或者二月就该写一篇年度总结了。然而，2020 年一开始确实发生了很多事情，因此一直拖到现在。索性就把 2019 全年和 2020 前三个月的感想一同写进这篇文章里吧。 我是从 2017 年开始写年度总结的，也就是说，我每写一篇年度总结，就意味着我离毕业的那一年又近了一年。这是我的第三篇年度总结，距离我毕业还有一年多的时间了。作为从进入大学开始就盼着早点毕业出去工作的我，当然非常开心。但同时，也有一丝丝的焦虑。 总的来说，我的 2019 年，是一个被不安和躁动充斥着的一年。 回顾 技术 学习和沉淀 从接触到前端开始，我就一直没有停下学习的脚步。当然，学了这么久的前端，我自己感觉我的水平似乎依然在原地踏步走。虽然做了很多项目，但是我总觉得我的基础似乎不那么扎实。与此同时，我发现了一个比较令我担忧的问题：这一年我似乎很少写文章了。要说形成写文章的习惯，还要感谢子健学长当年的引导。这的确是一个非常好的习惯，但在 2019 年却出现了断层的迹象。…	
Promise/A+ 规范：诞生与原理初探	14 Mar 2020	标签：Javascript异步ECMAScript6/7/8	在 Philip Roberts 眼中，JavaScript 是一门单线程、异步、非阻塞、解释型脚本语言。我们在享受 JavaScript 异步编程带来的便捷的同时，也在为如何处理异步（或处理异步带来的冗杂的代码）而苦恼。但是，作为一门富有活力的编程语言，JavaScript 也在不断地完善自己的标准与规范，为众多 JavaScript 开发者解决这些苦恼。当我们在谈论如何处理异步时，我们可能会立刻想起回调函数（Callback Functions）。我们可以通过这种神奇的机制完成对每一个异步操作结果的处理。然而，随着我们的代码越来越复杂，异步操作也越来越多，而原始的回调方式暴露出的问题也越来越明显。 好在，Promise 的到来为我们解决了一部分问题。那么究竟是什么使 Promise 具有如此魅力，使得它一度被称为“下一代”异步编程方案呢？我们将在本文中从源码和底层原理层面探讨这些问题。在阅读这篇文章前，我们需要掌握以下内容： JavaScript 事件循环机制 异步编程的基本概念 JavaScript 中回调函数的概念 Promise 规范以及基本使用方式…	
面向对象的 JavaScript：封装、继承与多态	12 Mar 2020	标签：Javascript	在现代编程语言中，我们经常提及面向对象编程（Object-Oriented Programming，OOP）。所谓的面向对象，其实是一种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。与函数式编程（Functional Programming，FP）不同，面向对象编程希望把所有的事物都认为是一个对象，而对象可以通过实例化一个类或继承一个对象而获得（函数式编程认为一切皆函数，一个确定的输入对应一个确定的输出，并且不会产生副作用）。 面向对象通常可以采用两种方式实现：prototype 或 class。JavaScript 中对象的实现显然属于前者，而后者的代表性语言有 Java、C++、TypeScript（TypeScript 同时支持这两种方式） 等。 本篇文章将会简单地梳理 JavaScript 中的相关问题。读完本文，您应该能了解到包括但不限于以下内容：类与对象、对象创建的几种模式、对象继承的几种模式、对象方法的重写和重载在 JavaScript 中的实现。 前置知识 如何理解类和对象 类是一类事物的抽象概括，它可能包含数据的类型和对数据的处理方法。对象是某个类的实例化。一个生动的例子也许可以帮助我们加深对它们的理解：生物学家会将地球上的生物划分为界、门、…	
异步的 JavaScript：浅析浏览器事件循环	14 Feb 2020	标签：事件循环Javascript异步	JavaScript 采用严格单线程的工作方式。这意味着 JavaScript 没有创建多个子线程进行异步任务的功能。但事实往往并非如此简单。在使用 JavaScript 开发时，我们也许会发现 JavaScript 的确能够实现异步。这背后的原因，与 JavaScript 采用的事件处理机制有关。这种机制被称为“事件循环”。在详尽阐释事件循环是什么之前，笔者希望您明白为什么 JavaScript 要采用单线程工作。 我们为何需要理解浏览器事件循环 浏览器事件循环是非常底层的知识。尽管我们在工作中并不是必须了解它。但是，要知道 JavaScript 是一种以事件驱动的语言——如果观察仔细的话，您一定能在您的代码中发现事件处理程序的存在，无论您是有意识地还是无意识地。因此，理解浏览器事件循环的工作原理似乎就显得十分必要，因为只有了解浏览器如何处理各种事件和任务，我们才能更好、更完美地使用事件驱动的方式编写更高质量的代码。 JavaScript 为何采用单线程 自互联网被发明以来，随着逐年增加的互联网用户的涌入，单纯的 HTML 和 CSS 已经无法满足用户日益复杂的需求。因此，当年的网景公司（Netscape Communications…	
基于 Webpack 4 多入口生成模板用于服务端渲染的方案及实战	07 Aug 2019	标签：Webpack服务端渲染	法律声明 警告：本作品遵循 署名-非商业性使用-禁止演绎3.0 未本地化版本（CC BY-NC-ND 3.0） 协议发布。你应该明白与本文有关的一切行为都应该遵循此协议。 这是什么？ 背景 现代化的前端项目中很多都使用了客户端渲染（Client-side Rendering, CSR）的单页面应用（Single Page Application, SPA）。在大多数情况下，它们都应该通过加载 JavaScript 脚本在浏览器中执行以将页面的大部分视图渲染出来，以及获取页面所需要的数据。单页面应用有着许多非常显著的优势，如它们（单页面应用）依赖的公共资源通常仅需加载一次。数据都是通过异步的 JavaScript 与 XML 技术（Asynchoronous JavaScript and XML, Ajax）加载的，异步性能往往非常高。在路由切换时，仅需刷新和（或）更改页面的一部分，而不需要重新加载整个页面以达到切换路由的目的，因此路由的切换在单页面应用中显得比较流畅自然。…	
2018年度总结	24 Jan 2019	标签：年度总结	今天是2019年1月24日，离2018年最后一天也已经过去将近一个月了。之所以现在才开始写年度总结，是因为这个学期期末考试开始得很早，我从18年年底就在复习功课。因此我在期末考试完后的现在完成过去一年的总结。 关于技术 个人感觉，在技术方面，2018年的成长是自学能力的提升。 去年的这个时候，我还是处于对新知识有些畏惧的状态，可以说对新知识或新技术有比较明显的抵触情绪。后来我才渐渐明白，这种情绪的根源是对自己技术的不自信和不认可。所以在过去的2018年，我几乎时时刻刻都在提醒自己不要有这样的想法，并积极接触并掌握了许多很新的技术。下面我想记录一下今年学会的技术 React Native 说到React Native（以下简称“RN”），这是一个非常神奇的框架，能帮助我们通过编写Javascript代码，编译成Android和iOS多端复用的原生代码，对于小公司或者小项目来说非常高效。不过初次接触RN时之前并没有学习过React.js的语法，所以刚起步时可以说是困难重重，后来听一位学长说起RN这个框架，说可以用“React.js一步一个坑，React Native是半步一个坑”来形容这个框架。不过幸好当时没有放弃，最终我对于RN的熟悉程度已经可以赶超Vue.js了。在暑假的时候我使用RN独立自主完成了两个APP项目。 Angular 学习Angular（以下简称“ng”）主要是社团的主要产品重新选型，选择了Angular为重构新版本的框架，前端UI库依旧是Bootstrap。…	
SysVInit	16 Oct 2018	标签：Linux	什么是 Init 系统，Iinit 系统的历史和现状Linux 操作系统的启动首先从 BIOS 开始，接下来进入 boot loader，由 bootloader 载入内核，进行内核初始化。内核初始化的最后一步就是启动 pid 为 1 的 init 进程。这个进程是系统的第一个进程。它负责产生其他所有用户进程。init 以守护进程方式存在，是所有其他进程的祖先。init 进程非常独特，能够完成其他进程无法完成的任务。Init 系统能够定义、管理和控制 init 进程的行为。它负责组织和运行许多独立的或相关的始化工作(因此被称为 init 系统)，从而让计算机系统进入某种用户预订的运行模式。仅仅将内核运行起来是毫无实际用途的，必须由 init 系统将系统代入可操作状态。比如启动外壳 shell 后，便有了人机交互，这样就可以让计算机执行一些预订程序完成有实际意义的任务。或者启动…	
将React Native应用签名打包成APK	27 Aug 2018	标签：ReactNativeReact.jsAndroid移动端	Android要求所有应用都有一个数字签名才会被允许安装在用户手机上，所以在把应用发布到类似Google Play Store这样的应用市场之前，你需要先生成一个签名的APK包。Android开发者官网上的如何给你的应用签名文档描述了签名的细节。 环境配置 Java Development Kit Android应用是由Java编写而成，生成签名的工具也同时依赖于Java Development Kit（JDK），因此，我们首先需要下载安装JDK。JDK的安装步骤很简单，在macOS环境下，只需将dmg镜像挂载，双击pkg文件，一直点击「Next」即可完成安装。安装完成后，为了确定JDK是否安装成功并且生效，请在终端中运行 java -version 如果结果如下图所示，则说明JDK已配置成功。 Android Studio Android Studio基于JetBrains Intellij IDEA开发，安装和配置方式和JetBrains IDE一致。在官网下载Mac安装包，依据提示安装并配置好Android SDK。 生成签名密钥 在配置好JDK之后，可以通过keytool生成一个密钥。macOS和Linux的keytool一般位于/usr/bin/keytool，Windows的keytool位于JDK安装目录的bin/…	
在React Native中使用TypeScript	21 Aug 2018	标签：TypeScriptReactNativeJavascript	JavaScript是一门弱类型的编程语言，声明变量时不需要声明变量的数据类型，因此这门语言编写起来具有很强的灵活性。但是换句话说在开发大型项目或多人合作的项目中，JavaScript混乱的变量数据类型常常会让人很头疼。因此，引入“数据类型”的概念就十分有必要了。 关于TypeScript TypeScript是一门由Microsoft开发和维护的JavaScript的超集。TypeScript可以使用JavaScript中的所有代码和编码概念，TypeScript是为了使JavaScript的开发变得更加容易而创建的。 TypeScript 从核心语言方面和类概念的模塑方面对 JavaScript 对象模型进行扩展。 JavaScript 代码可以在无需任何修改的情况下与 TypeScript 一同工作，同时可以使用编译器将 TypeScript 代码转换为 JavaScript。 TypeScript 通过类型注解提供编译时的静态类型检查。 TypeScript 中的数据要求带有明确的类型，JavaScript不要求。 TypeScript 为函数提供了缺省参数值。 TypeScript 引入了 JavaScript 中没有的“类”概念。 TypeScript 中引入了模块的概念，可以把声明、数据、函数和类封装在模块中。 TypeScript的优势 1. 静态输入：静态类型化是一种功能，可以在开发人员编写脚本时检测错误。查找并修复错误是当今开发团队的迫切需求。有了这项功能，…	
在React Native中引入antd-mobile-rn	18 Aug 2018	标签：ReactNativeCSSBabel	Ant Design Mobile终于推出了React Native版本，但是使用起来依然比较麻烦。对于我个人而言，平时做项目也只用其中的几个组件。而无论是antd-mobile还是antd-mobile-rn，按需加载都比较麻烦。所以本文主要记录如何以按需引入的方式使用antd-mobile-rn 官方描述 UI 样式高度可配置，拓展性更强，轻松适应各类产品风格 基于 React Native 的 iOS / Android / Web 多平台支持，组件丰富、能全面覆盖各类场景 (antd-mobile) 提供 "组件按需加载" / "Web 页面高清显示" / "SVG Icon" 等优化方案，一体式开发 使用 TypeScript 开发，提供类型定义文件，支持类型及属性智能提示，方便业务开发 全面兼容 react / preact 安装…	
在React Native中使用.jsx/.tsx扩展	15 Aug 2018	标签：ReactNativeJSX	前言 JSX是Javascript XML扩展，它是一种由Facebook提出的语法糖，其目的是在编写React程序时简化描述用户界面的过程。这种语法糖兼顾简洁性与可维护性。 一种 JavaScript 的语法扩展。 我们推荐在 React 中使用 JSX 来描述用户界面。JSX 乍看起来可能比较像是模版语言，但事实上它完全是在 JavaScript 内部实现的。（摘自JSX 简介） 通常，一段JSX代码可以单独放在一个*.jsx文件中，再通过Babel的loader完成JSX到React DOM的转换。 在React Native项目中，JSX同样被广泛应用。但是React Native却存在一些令人费解的行为。在React Native项目中，*.jsx文件是默认不被支持的。当我们直接在React Native中通过ES6 import的方式引入某个JSX文件时，将会出现类似以下展示出的错误： 解决方法 React Native的提供了一个名为rn-cli.config.js的文件。这个文件用于配置React Native的各种选项。在React Native启动服务的过程中，React Native会搜寻位于各个目录下的rn-cli.config.…	
超算DAY2·在Linux中安装Linpack并测试	12 Jun 2018	标签：超算Linux	第二天·在Linux中安装Linpack并测试 实验环境 系统环境 Red Hat Enterprise Linux 7 硬件环境 lspci 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02) 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II] 00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton…	
超算DAY1·Linux的安装与摧毁	11 Jun 2018	标签：超算Linux	第一天·Linux的安装与摧毁 Linux的安装 由于硬件因素的限制，本次Linux发行版安装实验采用虚拟机的方式进行。由于Linux只是一个操作系统内核，基于Linux构建的操作系统繁多，但据我的经验来看，各种Linux发行版的安装方法都基本一致，而且各大发行版及其衍生版基本上都提供了人性化的安装程序。本次实验中的Linux发行版采用为服务器量身打造的CentOS 6.9。 本实验的系统环境： 操作系统：macOS 10.13.5 High Sierra 虚拟化平台：VMWare Fusion Pro 10.1.2 Linux发行版：CentOS 6.9 Final 实验步骤 1. 镜像的获取 Linux镜像通常是光盘映像文件，打包成（*.iso）发布，用户可将ISO镜像刻录到各种物理介质中，然后从这些介质中启动ISO进行安装操作或LiveCD测试。 下载好的镜像如下： 2. 在虚拟机中安装Linux发行版 和物理机类似，在虚拟机中引导ISO启动，即可进入CentOS的安装过程： 进行光驱检测之后选择系统语言、时间地区：…	
GitHug通关指南	31 May 2018	标签：GitGitHub	前言 GitHug是一个帮助Git用户提升Git使用技能的工具。Git初学者可以通过GitHug提升自己的技能。 说明：使用GitHug时，每完成一步，执行一次githug命令，GitHug会自动检测上一步是否被正确完成。如果正确完成，就会提示通过并自动跳到下一步；如果错误完成，将会显示报错信息。如果你不懂如何正确完成这一步，执行githug hint使GitHug显示提示信息。必要时可以参阅下文中的附加链接。 通关指南 1. init ******************************************************************************** *                                    Githug                                    * ******************************************************************************** No githug directory found, do you wish to create one? [yn]  y Welcome to Githug! Name: init Level: 1 Difficulty: * A new directory, `git_hug`, has been created; initialize an…	
再谈移动端适配	11 Apr 2018	标签：移动端CSSJavascriptHTML	引言 移动端适配一向是很令人头大的问题，因为随着移动设备型号数量的爆发式增长，手机屏幕尺寸越来越多样化，网页内容自适应屏幕尺寸进行显示的需求也就越来越强烈。原本可能通过百分比/媒体查询等简单手段就可以常见的适配问题，但是对于页面有复杂结构或者视觉上有特殊要求的，就需要通过其他手段来解决了。 像素基础 像素 像素是一个老生常谈的问题了。不论是做前端开发还是做UI设计，都离不开这个话题。其实真要深究起来，像素是一个十分复杂的概念。追溯到上世纪6、70年代，计算机的输出设备还是点阵式打印机，如何使打印机打印出文字和图形？科学家们研究出了很多点组成的阵列，通过控制每一个点的黑白，最终组成文字和图形。现代计算机的显示器也借鉴了这个设计，发明了像素。 像素分为两种： 物理像素 又称设备像素(Device Pixel, DP)，这是组成显示设备的最小单位。可以理解为显示器上的一个一个的点，这些点组成一个个阵列。因为这些点间隔太短，排布太密集，所以肉眼观察不到颗粒感，物理像素通过RGB显色系统，分别控制RGB三基色通道的明与暗，形成了各种颜色。这就是所谓的视觉欺骗效果。任何显示设备的物理像素的数量都是不变的，出厂前就已经设定好。 物理像素的单位是pt，计算公式为： 1pt = 1 / 72 inch 设备独立像素…	
Await/Async 与 Promise	06 Apr 2018	标签：JavascriptAsync/AwaitECMAScript6/7/8Promise	我经常会遇到这种问题：我想向后端POST几张图片，然后得到后端返回的文件名，这一步调用的函数是A函数。当所有图片都上传成功并且拿到文件名之后，再将文件名传给下一个调用的函数进行下一步处理，这一步调用的函数是B函数。我希望只需要用户触发一次就能按顺序执行这两个函数。然而，事与愿违，Javascript的函数调用似乎是同步的——执行A的同时，B也开始执行!这让我十分苦恼。 异步调用 后来我才了解到，其实Javascript是可以实现异步调用的，但是ES5中只能使用回调的方法实现异步，这将无法避免“回调地狱”的发生。于是，ECMA组织意识到这个问题，并在ES6中提出了Promise的概念。紧接着，ES7又基于Promise提出了async/await的概念。 引用一段对这个概念的评价： async/await是写异步代码的新方式，以前的方法有回调函数和Promise。 async/await是基于Promise实现的，它不能用于普通的回调函数。 async/await与Promise一样，是非阻塞的。 async/await使得异步代码看起来像同步代码，这正是它的魔力所在。 一个简单的例子 有一段这样的代码： async function test () {   return 'hello world' } let result…	
VueJS组件库爬坑记 (4) - 基于官方文档制作模态框	24 Mar 2018	标签：HTMLVue.jsNodeJSWebpack	开篇序在家园工作室已经有半年之久了，在这期间，我学会了很多实用的技能。曾经认为很难驾驭的Vue.js，到现在已经能够很熟练地用它开发大大小小的项目。不久之前，我加入了云家园项目组，开始正式参与云家园项目的研发与维护。在此期间，我浏览了一遍云家园的前端代码，发现整体的架构还是相当复杂、庞大，并且过于繁冗。我参考了云家园项目中Bootstrap的引入方式与使用方式，发现项目中基本没有出现可复用组件（当然，也有一部分的组件是几位先辈封装的），但是Vue组件化的概念并未贯彻整个项目的代码中。于是我萌生出想要开发一个属于家园工作室自己的可复用的UI组件库的想法。这个想法提出来，有两位学长表示他们早就想做这个，然后用这个UI组件库去重构云家园的前端代码。所以我们三人在3天前的3月21日开启了制作一套基于Vue.js 2.0的UI组件库之旅。从这片文章开始，我将会记录我们在开发这套UI组件库中遇到的种种困难与解决这些问题的方案。实践性的内容将占到绝大部分，也有少部分偏理论的内容。我们可以将这个系列的博客理解为从零开始开发Vue.js组件库到其初具雏形再到其羽翼丰满的全过程的记录，一颗牙当作经验的积累。简介这片文章主要记录了基于Vue.js官方文档中关于模式组件而开发的一个模态框组件的过程。开发过程代码分析根据官方文档，一个受推荐的模式组件的代码应当形如下面：进一步观察发现，官方提供Demo在技术上具有如下特性：采用v-if控制模态框的显示与隐藏，而不是国内某些UI组件库普遍采用的v-model采用&lt;transition&gt;控制模态框的过渡动效采用Div编写模式组件，而不是常用的iframe组件内采用$emit回传动作信息（…	
JS中on函数的回调方法	08 Mar 2018	标签：Javascript	这个坑是我在开发寒假比赛项目的时候踩到的。大致的需求就是实现一个图片旋转方法，当图片的旋转角为逆时针90度时将图片传递给这个函数，在函数内部生成Canvas进行顺时针旋转90度的处理，最后将处理之后的结果返回出来。复现问题为了便于复现这个坑，我并没有重新写一个Demo，而是直接将代码展示出来。当时我的代码如下：utils.jsconst utils = {   rotateImg: (imgSrc, vue) => {     function getObjectURL (object) {       return (window.URL) ? window.URL.createObjectURL(object) : window.webkitURL.createObjectURL(object)     }     function dataURLtoBlob (dataurl) {       var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],         bstr = atob(arr[1]), n = bstr.…	
寒假比赛总结（八） - 比赛总结	23 Feb 2018	标签：CSSHTMLVue.jsJavascriptLess	前言到今天(2018-03-01)20点，为期一个多月的寒假比赛就结束了。按照惯例，每次比赛结束都写一些总结，把比赛过程中学到了什么、有哪些地方做得好的、哪些地方没做好的都记录一下。也可以当作反思。在比赛中吸取经验，这样会成长得更快。学到了什么规范的操作无论做什么事情，规范是必需遵守的。在比赛时，为了更好地与后端进行合作，我从前端页面的角度制定了一篇文档，在上面详细描述了每个页面所需接口的字段名、方法等等。(这篇文档目前还在：http://docs.lenconda.top/petlog/)在实际的操作中，我前端这边是严格按照文档规定的格式编写调用后端接口的逻辑。然而，后端似乎并没有认真按照这篇文档的规范进行编写：很多接口都是规定GET方法，后端却只允许POST方法；有很多接口的字段存在拼写错误(avatar拼成avater、字段名中少了s或多了s、follow漏了ed(原本是followed)等等)，给前后端对接交互造成很大的麻烦，也浪费了很多时间(我们从2月26日开始对接，到2月28日修改完Bug进入预备阶段，前后花了两天的时间)，而且后端接口初次测试十有八九都是500，这些500中肯定有很多是没有遵守规范造成的。这件事给我很深的感触，我认为前后端分离的开发模式下，规范一定是要严格遵守的东西。但是就我这次和两位后端的合作过程来看，家园的研发培训时并没有强调规范的重要性，或者说家园研发的新生并没有很强的规范意识，…	
寒假比赛总结（七） - 各种坑	23 Feb 2018	标签：CSSHTMLJavascript	前言在开发的过程中遇到了一些奇妙的坑。与其说坑，倒不如说自己以前从来没有遇见过或者考虑过这些东西。甚至其中某几个还曾一度被我认为是Bug。在查阅资料后发现那种设计还是有其道理的。1. 关于伪元素在比赛中用到伪元素的地方不多也不少，其实我认为伪元素的出现给开发带来了很多方便，代码也变得很干净整洁。因为伪元素并不是真正的元素，却又和真正的元素没什么差别。但是，伪元素也有其限制。现有需求如下图：因为头像右下角的相机在样式上是不变的，所以首选应该就是伪元素。于是我开始编写此代码：HTML:<img src="avatar.png" /> img {     width: 83px;     height: 83px;     border-radius: 50%;     position: relative;     &::after {         content: '';         position: absolute;         bottom: 0;         right: 0;         display: block;         width: 22.5px;         height: 22.…	
寒假比赛总结（六） - 关于使用到的一些从未遇见过的东西	23 Feb 2018	标签：HTMLJavascriptCSS	前言此文章用于记录在寒假比赛的过程中遇到的一些需求及其解决方法。主要涉及到之前工作学习的过程中未遇见过的技巧。既是为了复现一遍以增强理解，也为了在以后需要的时候能够随时记起。1. 自定义单/复选框HTML单/复选框是由类型为Radio的Input元素实现的，但是这个类型的元素会形成一个小圆圈/小方框，并且随浏览器样式的不同而不同。如果需要自定义这些组件，我的解决方法是将Input元素本身隐藏起来，然后在外层添加一个<label>元素包裹Input，再添加一个Input的兄弟元素，这个兄弟元素就是自定义的，用于表示该组件被选中与否的元素。以下列出代码：HTML:<label>     <input type="radio" v-model="value" value="value1" style="display: none" />     <i class="indicator"></i> </label> LESS:…	
寒假比赛总结（五） - 基于现有解决方案实现背景虚化	15 Feb 2018	标签：HTMLJavascriptCSSSVG	前言我对目前比较成熟的背景虚化方案还不是很熟悉，但是这次比赛项目需要用到这个功能，具体体现在使用虚化的用户头像当作头像展示的背景，类似于下图：采用这种方法的好处就是在保证大体美观的情况下减轻研发量(因为减去了用户上传背景图片的功能)。解决方案1.基于CSS3的高斯模糊滤镜此方案具体实现就是类似于实现毛玻璃特效的blur()滤镜，通过叠加背景图片达到高斯模糊效果。此方案我最开始是在Lea Verou所著的《CSS揭秘》一书中发现的，并且作者最初也是为了实现毛玻璃特效使用了高斯模糊。之所以认为它可以用于实现这个需求，是因为其本质是背景图片模糊。过程建立一个容器，宽高指定，指定所需背景图片：HTML<div class="head-wrapper" :style="{background: `url(../../../static/images/${this.avatar})`}"> Less.head-wrapper {     min-height: 161px;     height: auto;     width: 100%;     position: relative;     background-repeat: no-repeat !important;     background-size: 80% !important;     background-position:…	
寒假比赛总结（四） - 重新认识'router-link'	08 Feb 2018	标签：HTMLVue.jsJavascriptCSS	前言接触Vue.js的时间有半年了，正式将Vue.js用于项目开发也有将近三个月了。Vue中有个<router-link>的东西比较有意思，这个组件里有很多很有意思的小细节当时没注意到，不过比赛项目正好又要用上这个东西。一个看似不起眼的需求我们的比赛项目采用的布局是目前流行的APP布局，即：顶部一个Panel，中间是内容，底部是一个两个或两个Logo以上的Tabbar，用于不同功能之间的切换。而问题出在这个被激活的Tabbar元素上：这个匹配到当前路由的Tab需要被点亮，就像下图：因为我这边Tabbar采用的是Flexbox布局，然后每个元素用一层<router-link>包起来，然后分别跳转到各自匹配的路由上去。但是如何将匹配到的Tab点亮呢？？绞尽脑汁想了很久，还是没有一个比较完美的解决方案，期间想过Vuex，想过在data中绑定，但是每个想法都十分麻烦。发现ActiveClass突然想起一个月前在观看慕课网上一个Vue.js高仿饿了么的视频，里面貌似用过这个东西，好像是顶部的Tabbar，也是匹配了不同的路由，当点击其中一个时，文字变红，底部多了一个红色的下划线，切换另一个时，另一个变成上述状态，先前那个恢复原状。于是赶紧翻开视频，发现讲师演示代码的时候没有过任何与之相关的代码编写，当其在Chrome中展示的时候，发现被激活的Tab的<a&…	
寒假比赛总结（三） - 搭建用于发送验证邮件的邮件服务	07 Feb 2018	标签：LinuxPOP3SMTP	前言现代化的Web应用为了保证用户登录凭据的可靠性，通常会将验证真实性的验证码或验证链接等通过用户提供的渠道发送给用户，以验证其真实性。所以，为了控制用户登录凭据，我们的产品经理决定采用用户验证机制。其实综合说来，现在被广泛采用的用户验证手段不外乎SMS短信验证(文字验证、语音验证、用户发送短信)(用于当用户提供手机号码作为登录凭据时)、邮箱链接、邮箱验证码(用于当用户提供邮箱账号作为登录凭据时)。而我们的项目因为比较初级，所以在成本上的预算几乎为零(必要时倒贴钱的那种QAQ)。为此我们必须找到一个价格实惠又容易操作的方法。经过我的调查，目前国内市场上较受欢迎的SMS提供商，例如阿里云、SendCloud等，有着繁琐的个人验证审核的流程、高昂的费用、诸多的限制以及庞大的SDK，这其中每一项都足以令我们头疼。而邮件服务器虽说价格便宜了不少，而且还有腾讯企业邮件这种服务，但是操作过程也十分复杂。于是我想到在我们自己的服务器上架设一个邮件服务，虽然配置比较麻烦，但一免费，二没有限制，三纯净，去商业化，看起来非常划算，所以我就开始搭建我们自己的邮件服务。在这个过程中碰到了几个坑，但是好在这些坑都已经有前人填过了，所以并不是十分坎坷。但是仍然有记录的必要，因为网上的文章大都很零散，而本文则记录从零开始假设可以使用的邮件服务，并会附上Python代码。架设邮件服务的过程1. 理论基础以下图片较为直观地展现了邮件服务的工作原理及主要步骤：邮件的发送和接收过程主要分为3步。（1）当用户需要发送电子邮件时，…	
寒假比赛总结（二） - 解决前后端分离模式下前端与后端文件交互的问题	02 Feb 2018	标签：HTMLJavascript	前言我所在的产品项目组的核心功能就是图片上传，但是同时在用户发布之前还能删除任意图片。之前我已经了解到input的File List对象是只可读，不可写的。这就让我十分尴尬，想了很多办法，包括克隆数组，删除图片就标记一下，甚至是通过将图片Base 64编码直接放进数组里显示（实践证明如果图片太大，其Base 64编码也会非常非常长，长到一种无法想象的地步，此时浏览器也将会行走在崩溃的边缘QAQ），等等，一周前又需要修改图片的方向，所以上传时仅仅依靠input的FileList对象时完全不靠谱的。于是我又参考了其他大神的作品，发现其中很多人采用了Blob URL来展示图片。关于Blob引用MDN上对Blob构造函数的阐述：Blob 对象表示不可变的类似文件对象的原始数据。Blob表示不一定是JavaScript原生形式的数据。File 接口基于Blob，继承了 blob的功能并将其扩展使其支持用户系统上的文件。Blob类型通常用于处理大文件，同时提供一个URL，指向浏览器内存中的某个文件，并且具有和普通文件一样的接口。如何与后端接口进行交互于是我想到直接将Blob URL传给后端，但是后来发现这个URL只对浏览器当前标签页有效，所以直接将这个URL给后端时绝对不可行的。这个方法展示图片虽然能很简单地执行修改和删除，但是如何传给后端却是个很大的问题。经过几番查找资料，终于在StackOverflow上找到了一个能解燃眉之急的方案：https://stackoverflow.com/questions/14952052/convert-blob-url-to-normal-url这个问题被采纳的答案中有这么一句话：It is…	
寒假比赛总结（一） - 解决HTML移动端竖拍照片旋转90度的问题	02 Feb 2018	标签：HTMLCanvasJavascript	前言在这次寒假比赛中遇到了许多坑，有些坑堪称奇葩，比如说下面这个比较神奇的坑：HTML5中类型为file的input元素在上传图片，展示出来后，某些手机竖拍的照片会逆时针旋转90度的问题。概述发现这个bug大概在一周前，因为我们这个比赛项目需要用户上传图片，并能在发布之前预览。在预览的时候发现竖着拍的照片居然都旋转了90度！于是Google之，发现基本上所有机型手机的相机都存在这个问题（我当时用于测试的手机是小米Note3 MIUI 9，期间也尝试过iPhone、iPad等机型，均发现此问题）。导致旋转90度的原因大概是HTML自动将旋转角减去了90度。解决问题用到的工具/库要解决这个问题，首先需要读取照片的旋转角度（Orientation），而EXIF.JS可以读出照片的旋转角度：我拿了一张用小米Note3的相机拍摄的照片测试，根据EXIF.JS读出的信息得出这张图片的方向角度是90度。思路其实用EXIF.JS读出来是一堆tags，从tags中找到Orientation的值，如果图片的方向是90度，那么Orientation的值就为6。所以，我们只需要在拿到图片之后放进EXIF.JS里判断一下Orientation的值是否为6，如果为6，那么就将图片绘制到一个隐藏的Canvas里，再使用Canvas的rotate API进行旋转，最后再将修改好的图片输出。步骤在Webpack项目中安装EXIF.JS：npm install exif-js --save 在项目中引入EXIF.JS：import…	
前端开发必备的VSCode插件和配置	06 Jan 2018	标签：VSCode	最近一个月我正在从JetBrains系列逐渐转向微软开源的Visual Studio Code进行前端开发(主要是因为我个人觉得做Web前端使用JetBrains那样的IDE的话有点不划算，所以瞄准了个头小得多，反应灵敏得多的VSCode)。由于VSCode知识一个编辑器，类似于Sublime Text和Atom，需要很多插件的支持才能满足基本的开发需求。我个人认为VSCode的扩展功能做得相当人性化，不过每次更换工作环境安装VSCode后总有那么多插件要安装，自己也不可能全部记下来。所以这篇文章是记录下我收集的针对Web前端开发的一些插件。另外，还提供一些必须的自定义配置。语法高亮1. C/C++ Clang Command Adapter扩展标识符：mitaki28.vscode-clang这是C/C++的补全提示插件同时具有查错功能。因为平时接触C/C++比较多，所以这个插件也应该需要，即使它并不是前端开发所必须的。2. HTML CSS Support扩展标识符：ecmel.vscode-html-css为HTML文档提供CSS支持。具体的功能大致有Class和ID的补全、Zen Coding的补全、检查在工作目录中存在的CSS/SCSS文件、读取远程CSS样式表等，功能很强大。3. HTML Snippets扩展标识符：abusaidm.html-snippets该插件提供HTML的语法高亮功能，使用户可以通过Tab键自动补全一个Tag，…	
2017年度总结	31 Dec 2017	标签：年度总结	今年对我来说是最不平凡的一年，因为在上半年，我还在苦苦挣扎；6月，我熬过了传说中的高考，来到了大学深入学习我感兴趣的专业。也是在这一年，我和家园工作室相遇。在2017的后半年里，学习到了很多东西，收获了很多友谊。 学习方面 按照时间顺序： 同样在2017年上半年，通过自学掌握了Linux集群(LVS)的基本原理和搭建方法，并在家中采用虚拟化解决方案模拟了一个小型的集群；通过自学掌握了高可用原理，接触了Keepalived，学会双机热备；掌握MySQL基本语法，实现MySQL热备份；学会手动编译搭建LNMP和LAMP环境，Nginx调优，独立编写了一份LNMP自动部署的脚本。 6月进行高考，之后的暑假继续学习Linux运维方面的知识，之后接触Web前端编程和PHP编程，独立开发了一个PHP项目。 9月进入南昌大学计算机系，开始学习专业知识。之后进入南昌大学家园工作室，成为前端工程师，继续学习Web前端。在下半年深入学习了JavaScript和ECMAScript语法，并为接触ECMAScript 6做好了准备；学习了Bootstrap UI框架和jQuery库，并能较为灵活地使用，在实际工作中提高效率，减少代码量；学习了Vue.js前端框架，对MVVM模式有了初步的了解，并具有使用Vue.js开发简单SPA应用的能力；开始接触Node.js和Webpack的基本操作，…	
HackWeek踩坑记(6) - 前后端跨域问题与反向代理的解决方案	16 Dec 2017	标签：NginxXSS	作为一个“前端打字员”，最烦人的莫过于前后端交互过程中的跨域问题了。 由于浏览器的同源策略，不同域下的数据是不能互相调用的，如果有这种需求，必须 在响应头中加上对应的允许跨域的头； 直接给一个回调函数的接口，然后在前端执行函数拿到参数，当做XHR的响应数据。 但以上两种方法并不能解决前端真正面临的问题 在我们组实际项目开发的过程中，API的地址经常会发生变动(主要是更换不同的服务器，甚至在本机的TCP 3000端口跑Flask)，可是前端代码中有很多个API请求，不可能每次API迁移都在前端代码中修改对应的IP地址，否则我就真成前端打字员了。 在开发过程中的解决方案 所以经过查阅资料，发现Webpack中支持反向代理的功能，支持路径绑定到其他域名。经过一番学习，配置完成之后的config/index.js的proxy部分如下： 这样的话，前端只需要写api/XXX这样的路径，就能完美避免所有的麻烦。 在部署时的解决方案 根据类比推理，可以推测在服务器部署项目时可以使用Nginx强大的反向代理功能，将原本监听TCP 3000端口的Flask Docker映射到/api下，此处感谢显林叔提供的配置文件参考： 根据显林叔提供的参考范例，我在部署项目时完成的配置文件如下： 其中有个小问题：我们的后端API路径都是从/开始的，如果location字段只有/api {}，前端在请求例如/api/test时，…	
HackWeek踩坑记(5) - 通过$.ajax()传递JSON格式的数据	16 Dec 2017	标签：jQueryAjax	这其实是另一个组掉的坑，情况大致是这样：该组的后端写好了一个API路径，只接受POST方法，而且POST的数据只接受Content-Type为application/json格式的数据，也就是说前端写的XHR请求必须POST一个JSON格式的数据。而这也是问题的根源所在，因为该组的前端使用jQuery编写Ajax请求，在$.ajax({})中的data字段里注入的数据发送给API时变成了x-www-form-urlencoded格式，也就是说把JSON数据变成表单数据提交给了API，所以API才会一直报400错误。然而我之前似乎从来没有用过$.ajax()方法传递过JSON数据，当时我尝试过JSON.stringify()方法插入到data中，还是不奏效，之后去Google上找答案，才知道需要手动设置Request Header。但是这个方法必须在POST数据之前拿到原生的XHR对象，再通过XMLHttpRequest.setRequestHeader()来设置Content-Type改造后的代码示例如下：$.ajax({ 	type: 'POST', 	url: '/api/demo', 	dataType: 'json', 	beforeSend: function(xhr) {		//此处通过函数传入XMLHttpRequest对象的实例 		xhr.setRequestHeader('Content-Type', 'application/json') 	}, 	success: function(data) { 		//对回调函数传入的response进行处理…	
HackWeek踩坑记(4) - GitHub仓库改名	16 Dec 2017	标签：GitGitHub	在我们组立项之初，我就立马在GitHub上建立起了代码仓库。然而猝不及防的事情时有发生，项目名称发生过好几次变动，很多地方都需要改变。而最让我头疼的就是GitHub上仓库的名字，因为改名之后从本地push到远程仓库可能会发生一些冲突，我不想冒这个险，但是有不想先把本地的目录删掉再去GitHub改名再clone一份到本地。于是经过查阅资料，我找到了比较靠谱的方法，只是在这篇文章里做一下备忘：~ → git remote -v	#查看远程仓库的配置 查看完远程仓库的配置之后，根据返回信息的需要，进行下一步的操作~ → git remote remove origin	#在远程仓库中删除旧的origin 经过这一步操作可以将远程仓库中旧的origin删除，然后就能在远程添加新的.git~ → git remote add origin git@github.com:USERNAME/NEWNAME.git 添加完之后，就可以将本地的目录重命名成新的名字了。…	
HackWeek踩坑记(3) - SQL获取某一条记录的index	16 Dec 2017	标签：MySQL	第三个坑：SQL获取某一条记录的index 我们组的项目中的一个API涉及到个人排名信息展示，当时在和其他的开发人员讨论时确定了两种方法： 先采用 SELECT * FROM `user` ORDER BY `percentage` desc 查询按照分数将序排列的dict，再由Python封装成json传回给前端，前端遍历一遍数组中所有元素，用条件语句筛选当前用户所在的index，再将index加上1，得到用户当前的排名； 2. 先采用 SELECT * FROM `user` ORDER BY `percentage` desc 得到一个排列后的记录，再从中寻找指定条件的记录，获取这个记录所在的index，直接将数值传回给前端。 经过我们数次实际的数据库查询实验，发现第一种方案在数据量达到一定数量时会严重拖慢前端渲染的速度，而第二种方案很难通过SQL查询的方式直接返回一个数值。这两个方案都有缺陷，一度使我们很尴尬。 后来，通过询问学长，我们在网上查阅资料时偶然发现了一个和我们的需求十分相似的SQL语句： 这引起了我们的兴趣，于是我们很快照着这篇文章的模板写出了我们自己的代码： def chaxunmingci(self):         conn = get_conn()         cursor=conn.cursor(…	
HackWeek踩坑记(2) - 在Webpack中引入jQuery	16 Dec 2017	标签：jQueryWebpackVue.js	第二个坑：在Webpack中引入jQuery jQuery从诞生起，就以其简洁、高效迅速得到开发者的认可，如今绝大多数网站都采用jQuery库。而在我们组的项目中，我也想使用jQuery编写Ajax、元素选取之类的代码，但是我发现直接在HTML入口文件src/index.html中加入一个引入jQuery的script标签似乎并不会其任何作用，相反，引入JS文件之后反而给整个项目带来一大堆的报错。我也尝试过很多种方法将jQuery代码放在不同的位置，但是都不奏效。所以迫于时间压力，我不得不放弃在项目中引入jQuery的想法，这也成了这个项目中最大的遗憾。 尝试引入 今天HackWeek刚结束，我就迫不及待开始在Google上查阅相关资料。在查阅资料的过程中，我偶然发现其实jQuery也可以向其他的库一样通过模块的方式引入，于是我尝试在项目根目录下执行npm install jquery，执行成功，随后我再去JS入口文件src/main.js中写入 import $ from 'jquery' 在页面写好一段jQuery代码，发现console还是报错： 回头一看main.js发现import jQuery的那一行代码还是灰色的，应该是还有哪个地方没有配置好导致$没被使用，造成在代码中使用$之后报错。 解决问题 最后我在百度中寻找到了一种比较可行的办法，大概的意思就是将jQuery库当做一个插件写入Webpack的基本配置文件中，大概的解决办法是： 先在src/main.js中写入：…	
HackWeek踩坑记(1) - 移动端H5适配	16 Dec 2017	标签：CSSJavascriptREM	开篇 有幸参加了2017年南昌大学家园工作室举办的为期两周的黑客马拉松(Hack Weeks)。其实我很想通过类似的活动提升自己的能力。只不过当我真正参与到项目的开发中，才会发现，自己还是太年轻！ 本系列文章记录了我在参与整个团队协作过程中遇到的问题和心得体会，其内容将会涵盖前端开发、UI设计原则、SQL语法、服务器配置以及如何高效地进行团队协作等方面的内容。 第一个坑：移动端适配与视觉稿的呈现 可以说在这次Hack Week活动中折磨我最久的就是视觉稿。因为我以前并没有移动端适配和根据视觉稿来编写UI的经验，所以，当我拿到设计师给我的视觉稿时，其实我是一脸懵逼的。对视觉稿使用的不熟练以及移动端适配经验的缺失，成为在后来的两个星期中，不断折磨我的梦魇，也出于这些原因，给设计师带来很大的麻烦。因此，我深感自己的能力不足，尤其是移动端H5页面制作方面的知识，亟待补充。 今天我们的项目终于完成了调试工作，趁此机会赶紧补习了移动端适配的方案。 在下面的文章中，我将参考使用Flexible实现手淘H5页面的终端适配学习移动终端H5适配 几个概念 物理像素(Physical Pixel) 物理像素又被称为设备像素(Device Pixel)，他是显示设备中一个最微小的物理部件。每个像素可以根据操作系统设置自己的颜色和亮度。正是这些设备像素的微小距离欺骗了我们肉眼看到的图像效果。 举例：iPhone 6的dp为 750 × 1334 设备独立像素(…	
给菜单的顶部添加一个小三角形	01 Dec 2017	标签：CSSHTML	起因 最近在学习仿制百度首页。百度首页中有一个设置菜单很特别：由无序列表组成，但是外边框的上边缘有一个小三角。于是想做一个仿真的百度设置菜单。 制作 一切由border引起 如何用CSS画出直角三角形？以我当时的CSS知识水平，并没有接触到绘制直角三角形的技巧，直到一位学长的奇技淫巧点醒了我： 使用border！！！ 于半懵半醒中，我围观了一波学长大佬的操作： 1.先建立一个边框为红色10px，宽高均为100px的box： 	<!DOCTYPE html> <html lang="en"> <head>   <meta charset="UTF-8">   <meta name="viewport" content="width=device-width, user-scalable=…	
VueJS爬坑记（3） - 打包后无法渲染页面	30 Nov 2017	标签：Vue.jsNodeJSWebpack	起因 使用Webpack学习VueJS一段时间之后，准备使用Webpack的build编译生成上线代码。 然而，在将npm run build之后生成的dist/目录部署上线时，却是一片空白 问题分析 打开Chrome开发者工具的Network板块时，发现大量的文件无法加载： 对首页路由进行元素分析，结果如下： 我的猜测如下： 经过Webpack打包的项目，默认的路由根目录都是#/开始的，而该页面所有的scripts引用的都是/static下，而非#/static下的，而这就是为什么整个项目的脚本源码文件都无法加载的原因。 填坑 经过上网查阅资料，我找到了Vue-cli项目中的打包配置文件的所在：/config/index.js，其中的build字段如下： 既然是针对build的配置，而且编译后所有的scripts都是放在#/static/下的，于是想到使用相对路径的根目录./代替绝对路径的根目录/，再次执行npm run build，问题解决。…	
VueJS爬坑记（2） - 依赖问题和Webpack打包	23 Nov 2017	标签：Vue.jsNodeJSWebpack	起因 从入坑Webpack已经有一个礼拜了，在这期间我注意到，通过Vue脚手架搭建的Web应用程序通常需要非常多的依赖，但是如果遇上多人协作共同开发这个APP的话，如果依赖问题处理不了，应该是一件十分尴尬的事。还有一点就是Vue的应用程序不可能在生产环境下也用NodeJS跑，这是在开发过程中维拉方便调试和新增或删除模块而使用npm的run功能来快速搭建一个支持热更新的Web应用程序。 填坑！ 解决代码迁移带来的依赖问题 就像上文中说到的，我们构建一个应用程序时遇到多人协作，将Node模块一块儿共享出去是完全不符合常理的，而且这期间我在GitHub上寻找了一些使用Vue-cli或者是其他NodeJS项目构建的WebApp，发现代码结构中并没有存放NodeJS模块的.node_modules目录，通过.gitignore将这个目录排除在外，说明依赖信息应该装载在某个文件中（目前还在研究），而他人只需要把其他主要的代码克隆下来，在根据这个依赖信息寻找必要的NodeJS包。 那么问题来了：手动安装全部的依赖并不合理，一定还有某种自动化的方式将依赖部署到位。 经过GitHub上类似项目的README和百度、Google的查找，同时经过自己的验证，最终发现了两种方法可以达到目的： 通过npm install 这是最简单的方法，一键搞定所有依赖关系，只需在项目根目录下运行下面的命令： npm install 再执行： npm run dev 即可完成所有的依赖工作，并在本地NodeJS服务器中以开发模式运行。 通过yarn install yarn是又一个强大的工具，和npm使用相似： 首先要通过npm安装yarn： npm…	
VueJS爬坑记（1） - 关于在单文件中的根节点	23 Nov 2017	标签：Vue.jsWebpackNodeJS	前言 最近在通过Vue-cli配合Webpack构建VueJS应用学习VueJS，但是由于对NodeJS用法和Webpack语法不熟悉，导致错误的排查很困难。所以，我准备在博客里开一个专栏记录VueJS爬坑过程。顺便结合VueJS学习ES6的语法。 起因 最近开始接触VueJS的脚手架工具vue-cli，并逐步了解VueJS的单文件组件的写法。在最近的某一天，我使用单文件创建了一个导航栏的组件Navbar.vue，并希望将其引入视图入口文件/src/App.vue中，结果页面突然抛出一段报错信息，截图如下（情景再现）： 寻找解决方案 首先，得到这个信息，就基本上可以确定是/src/App.vue出现了问题，而且一定是引入了组件之后产生的； 这种NodeJS的报错对于我来说还是十分陌生的，，这一报错也让我措手不及，最开始我还以为是我引入组件的语法或者路径出现了错误，但是仔细检查之后发现并没有此类问题； 于是我又返回报错页面查看报错信息，终于从结尾处找到了一条貌似有用的信息 Component template should contain exactly one root element. If you are using v-if ... 仔细琢磨这句话我好像明白了点什么，“组件模板必须包含一个根组件”。但是我并没有完全弄明白是怎么回事，…	
NodeJS服务器无法使用外部IP访问的解决方案	16 Nov 2017	标签：NodeJS	最近在学习上碰到了一些坑，每天基本上是踩着坑前进的QAQ。比如说在学习Vue-cli脚手架搭建Vue.JS应用，就碰到了一个情况：执行npm run dev之后只能从本机访问Vue APP，外部IP访问永远都是无响应。 寻找解决方案 端口被禁用？ 正常人的第一反应肯定是端口的问题，于是我登上服务器执行iptables -F，清空IPTables中所有的规则，但很遗憾，并没有奏效。 可能仅仅只需要一个反向代理 首先想到的可能是需要Web服务器来实现外部访问。既然想到了这里，我就接着想到了利用反向代理的方法，将访问80端口的数据包代理到Node服务器监听的8080端口，再从8080端口取回response到80端口，从而实现外部IP访问Node服务器。 于是，我选择了反向代理性能卓越的Nginx作为Web服务器，查阅大量资料后写好了配置文件，重启Nginx成功，从外部访问80端口，仍然是默认的HTML页面，这使我很困惑，于是尝试不同参数的修改，但全都不奏效。 无奈之下，我只能从Node服务器本身入手。 监听的IP是什么？！ 继续分析还有什么因素导致无法通过外部IP访问Node服务器。我突然想起之前在学习服务器架设的时候遇到的坑，就是服务监听的IP不同可能导致访问效果的不同，比如说Httpd服务器监听127.0.0.1:80之后，只能通过127.0.0.1、localhost之类的来访问这台主机的Web服务，…	
CSS的伪元素::before和::after	02 Nov 2017	标签：CSS	起因 之所以认识到::before和::after，是因为在分析其他网页代码是经常看到这两个东西。直到有一次我在https://elementary.io上看见一个超链接效果，如下图所示： 分析 随后我对这个链接进行了分析，发现在这个链接的<a></a>中只有“安全细则”四个字，并没有类似于大于号(">")的字符； 然后考虑到开发者是否为超链接设置了CSS样式，于是我发现这个超链接被设置了一个名为read-more的CSS样式，在Chrome中找到这个样式的代码如下： ::after是个什么东西？以前似乎从来没有遇见过，但是经过查找资料之后对于用两个冒号似乎明了了起来： ":before" 伪元素可以在元素的内容前面插入新内容。 ":after" 伪元素可以在元素的内容之后插入新内容。 像::before和::after这样的元素在CSS中被称为“伪元素”，这两种伪元素分别用于在应用了某种样式的元素之前和之后插入新的内容。 就拿这段代码来说，::after伪元素中的content属性值\f105在font-awesome中代表fa-icon-angle-right，也就是右三角(形似“…	
CSS实现毛玻璃效果	02 Nov 2017	标签：CSSHTML	思路 在需要进行毛玻璃处理的元素上，使用滤镜blur()进行模糊处理。 困难 仅仅针对该元素使用滤镜，会将整个元素的文字一并模糊，而需要模糊的被元素覆盖的背景部分反而没有被模糊。 解决 为了解决这个问题，参考资料给出的方法是使用伪元素覆盖在该元素上，再在该伪元素上使用同样的背景图片，并设置绝对定位，上下左右的外边距都设成0，以完全覆盖在元素上。 具体实现 将一张图片设成body元素的背景： body{     background-image: url("http://pic1.win4000.com/wallpaper/f/5429075a60431.jpg"); } 定义一个.main，进行一些样式的编写： .main{     height:600px;     width:1000px;     color: #282c34;     border-radius: 5px;     position:relative;     top:100px;     margin:0 auto;     padding:…	
JavaScript获取URL参数值的方法	06 Oct 2017	标签：Javascript正则表达式	情景 GET类型的URL参数以?开始，以&分割每组类似于键值对的参数名和参数值，例如： http://localhost:8080/test.php?user=lenconda&action=logout 针对这一个URL，我们提出要通过JavaScript取出user参数的值。 基于JavaScript的实现 我们有两种方案：1.使用传统的if和for语句进行判断；2.使用正则表达式提取想要的值。 预备知识 window.location.search 这个方法可以让我们获取到当前URL的所有参数的字符串形式，例如在本里中，使用此方法返回的值为 ?user=lenconda&action=logout substr() 此方法最多接受两个参数：m和n，m表示截取字符串的起始位置，n表示截取字符串的长度。当n省略时，默认截取到字符串末尾处。在本例中，我们要去掉“?”，所以代码应该是这样的： window.location.search.…	
ECMAScript学习笔记-函数与变量	05 Oct 2017	标签：ECMAScript6/7/8Javascript	变量的声明 ECMAScript的变量是松散类型的。如下所示，使用var操作符定义一个名为“param”的新变量： var param; param变量可以被用来保存任何类型的数据。 var param1=1,param2="hello",param3=["w","o","r","l","d"]; 上例可以同时定义多个变量，并且每个变量被赋予不同类型的值是合法的。 函数的声明 ECMAScript定义函数使用function操作符： function MyFunc(param1,param2,...){ 	_BODY_ } 关于函数的书写 ECMAScript中定义的函数的函数体可以不用{}括起来，但是为了增强代码的美观性和可读性，同时为了避免犯不必要的错误，函数体最好用{}括起。 关于在函数体中声明的变量 通常，…	
ECMAScript学习笔记-数据类型	28 Sep 2017	标签：ECMAScript6/7/8Javascript	数据类型 ECMAScript定义了5种基本类型：String、Number、Boolean、Undefined和Null；和1种复杂类型：Object。 5种基本类型分别对应着：字符串、数字、布尔值、未定义和空。 数据类型的探测 数据类型的探测一般采用typeof操作符，例如： var param="test"; console.log(typeof param);//控制台返回object var param=true; console.log(typeof param);//控制台返回boolean var param=123; console.log(typeof param);//控制台返回number 关于变量未被赋值的情况 var param; console.log(typeof param);//控制台返回object…	
BootStrap列排序	04 Sep 2017	标签：BootstrapCSSHTML	情境引入 假设一张页面的左部分有一个col-md-8的栏目，右侧有一个col-md-4的侧边栏。在响应式布局时，常常需要将侧边栏放置在col-md-8的上方，于是就可以引出下列代码： <div class="col-md-4"></div> <div class="col-md-8"></div> 但是，由此将会导致一个问题：在正常显示时col-md-4的侧边栏将在col-md-8的左侧！ 问题解决 为了解决这一问题，BootStrap提供了push和pull两种列排序的方式。那col-md来说，将一个col向右移动称为col-md-push-，向左移动称为col-md-pull-： <div class="col-md-4 col-md-push-8">.col-md-4</div> <div class=…	
通过纯CSS3实现简单的瀑布流布局	03 Sep 2017	标签：CSSHTML	原理 CSS3中存在一个column属性，通过设置column可以达到多列布局的要求。 基本语法 column: column-width, column-count column-width：规定每个列的宽度，因为瀑布流布局需要宽相等，高不等； column-count：规定页面中存在的列数，此属性并不常用。 代码的实现 css/style.css .container{     -webkit-column-width: 256px;     -moz-column-width: 256px;     column-width: 256px; } .box{     margin:10px;     width:254px;     border:1px solid #CCC;     box-shadow: 0 0 15px 0 #CCC; } .box img{     width:246px;     margin:4px; } .box p{     margin:6px;…	
通过BootStrap实现简单的瀑布流布局	01 Sep 2017	标签：BootstrapCSSHTML	原理 BootStrap自带栅格系统，可以实现多列自适应布局。使用栅格系统进行布局设计可以比较完美地符合瀑布流布局的要求。关于栅格系统，请参见http://boot.lenconda.top/css/#grid 准备工作 1.引入BootStrap BootStrap可以从CDN几点引入，或者从单文件引入： <link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" type="text/css"> 或者 <link rel="stylesheet"…	
JavaScript选项卡切换实例	21 Aug 2017	标签：JavascriptHTMLCSS	需求 实现简单的选项卡切换功能 代码 <!DOCTYPE html> <html> <head lang="en">     <meta charset="UTF-8">     <title>实践题 - 选项卡</title>     <style type="text/css">         *{             margin:0;padding:0;font-size:13px;         }         li{             list-style-type:none;…	
底部版权导航条以及侧边栏的制作	11 Aug 2017	标签：CSSHTML	一.侧边栏的实现 1. 设置侧边栏样式 .sidebar{ 	position:fixed; 	top:52px; 	left:0; 	bottom:0; 	background: #f5f5f5; 	padding:20px 0 0 0; } 2.设置侧边栏<a>标签样式 .nav-sidebar li a:hover,.nav-sidebar li a:active,.nav-sidebar li a:focus{ 	color: #fff; 	background-color: #428bca; } 3.设置侧边栏自适应 @media (max-width:768px){ .sidebar{ display: none;…	
BootStrap栅格化布局	10 Aug 2017	标签：BootstrapCSSHTML	Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局。 栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。下面就介绍一下 Bootstrap 栅格系统的工作原理： “行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。 通过“行（row）”在水平方向创建一组“列（column）”。 你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。…	
解决小米笔记本运行Ubuntu无法接收WiFi信号	10 Aug 2017	标签：LinuxUbuntuMi	执行： sudo vi /etc/modprobe.d/blacklist.conf在文件末尾处加上： blacklist acer-wmi重启Ubuntu…	
				
